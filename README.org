#+title: README - Scott Kjorlien dot com


* Directory Structure 

#+begin_src plain
scottkjorlien/
├── content/
│   ├── index.org
│   ├── about.org
│   ├── contact.org
│   └── ... (other Org files for future pages)
├── static/
│   ├── css/
│   │   ├── style.css
│   │   └── ... (other CSS files)
│   ├── js/
│   │   ├── script.js
│   │   └── ... (other JavaScript files)
│   ├── images/
│   │   ├── logo.png
│   │   └── ... (other image files)
│   └── ... (other static assets)
├── .dir-locals.el
└── README.org
#+end_src

- =content/=: This is for storing Org files for each page (e.g., =index.org=, =about.org=, =contact.org=).
- =static/=: This directory contains static assets that won't be generated by Org publish, such as:
	+ =css/=: CSS files for styling your website.
	+ =js/=: JavaScript files for adding interactivity.
	+ =images/=: Image files used by your CSS or JavaScript files.
- =.dir-locals.el=: This is an Emacs Lisp file that sets directory-local variables for your project. You can use this file to customize Emacs settings for your project including the =org-publish-project-alist=
- =README.org=: This is your current file, which will serve as a starting point for your website.

* in the init.el
Manage my publishing by setting the publish alist in .dir-locals.el. 

#+begin_src emacs-lisp :tangle no
(setq org-publish-project-alist
      '(("scottkjorlien"
         :base-directory "./content"
         :base-extension "org"
         :publishing-directory "./public"
         :recursive t
         :publishing-function org-html-publish-to-html
         :html-extension "html"
	 :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"../static/css/styles.css\">"
         :html-preamble t)))
#+end_src

so in this case, publishing to a web server isn't as simply as copying the contents of public, right? I also have to push static? or will org-publish collect all those resources in a common place so pushing via ftp is simple


When using =org-publish=, you have a few options to handle static assets like CSS, JavaScript, and image files. Here are a few approaches:

1. *Manual copying*: You can manually copy the static assets from the =static= directory to the corresponding directory in the =public= directory. This approach requires you to keep track of which files need to be updated and when.
2. *Using =org-publish='s =:staticDirectoryName= property*: You can set the =:staticDirectoryName= property in your =org-publish-project-alist= to a directory name, and =org-publish= will collect all static assets from that directory and copy them to the corresponding directory in the =public= directory.

For example:
#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("scottkjorlien"
         :base-directory "./content"
         :base-extension "org"
         :publishing-directory "./public"
         :recursive t
         :publishing-function org-html-publish-to-html
         :html-extension "html"
         :staticDirectoryName "static")))
#+end_src
This will tell =org-publish= to collect all static assets from the =static= directory and copy them to the =public/static= directory.

3. *Using =org-publish='s =:uploads= property*: You can set the =:uploads= property in your =org-publish-project-alist= to a list of files or directories that should be uploaded to the server. This approach gives you more fine-grained control over which files are uploaded and where they are placed on the server.

For example:
#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("scottkjorlien"
         :base-directory "./content"
         :base-extension "org"
         :publishing-directory "./public"
         :recursive t
         :publishing-function org-html-publish-to-html
         :html-extension "html"
         :uploads (("/static/css/styles.css" "/static/css/styles.css")
                   ("/static/js/script.js" "/static/js/script.js")
                   ("/static/images/logo.png" "/static/images/logo.png")))))
#+end_src
This will upload the specified files to the corresponding locations on the server.

In your case, if you want to push the static assets to the server along with the generated HTML files, you can use either the =:staticDirectoryName= or =:uploads= property to tell =org-publish= to collect and upload the static assets. This way, you can push the entire =public= directory to the server, and all the necessary files will be in place.

or do you think instead of putting static in =/static=, it should actually be =/content/static=? and then would publish copy the assets over to public?

If you put your static assets in a directory like =/!content/static/=, =org-publish= will automatically copy them to the corresponding directory in the =public/= directory.

This approach is actually a more straightforward and conventional way to handle static assets with =org-publish=. By placing the static assets inside the =content/= directory, you can take advantage of =org-publish='s built-in behavior of copying files that are not Org files to the publishing directory.

So, in your case, you could structure your directories like this:
#+begin_src plain
scottkjorlien/
├── content/
│   ├── index.org
│   ├── about.org
│   ├── contact.org
│   ├── static/
│   │   ├── css/
│   │   │   ├── style.css
│   │   ├── js/
│   │   │   ├── script.js
│   │   ├── images/
│   │   │   ├── logo.png
│   │   └── ... (other static assets)
│   └── ... (other Org files)
├── .dir-locals.el
└── README.org
#+end_src
Then, in your =org-publish-project-alist=, you can simply omit the =:staticDirectoryName= property, and =org-publish= will automatically copy the static assets from =/content/static/= to =/public/static/=.

For example:
#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("scottkjorlien"
         :base-directory "./content"
         :base-extension "org"
         :publishing-directory "./public"
         :recursive t
         :publishing-function org-html-publish-to-html
         :html-extension "html")))
#+end_src
This way, when you run =org-publish=, it will generate the HTML files from your Org files and copy the static assets to the corresponding directory in the =public/= directory.

This approach is often more convenient and easier to manage than using the =:staticDirectoryName= or =:uploads= properties, especially if you have a large number of static assets or need to organize them in a complex hierarchy.

